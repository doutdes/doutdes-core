#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app').app;
let debug = require('debug')('doutdes-core:server');
let https = require('https');
let http = require('http');
let fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

let options;
let server;
let port = 8080;

if(process.env.PEM_PATH) { // If using certificates, enable SSL
  options = {
    key: fs.readFileSync(process.env.PEM_PATH + 'privkey.pem').toString(),
    cert: fs.readFileSync(process.env.PEM_PATH + 'cert.pem').toString()
  };

  server = https.createServer(options, app);
  server.listen(port);
}
else {
  server = http.createServer(app);
  server.listen(port); // Local version
}

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
